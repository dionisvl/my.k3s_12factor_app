@startuml k3s Nginx Hello World Sequence (Enhanced)
!theme plain

actor Developer as D
participant "kubectl" as K
participant "k3s Cluster" as K3S
participant "Traefik Ingress" as TI
participant "API Server" as API
participant "Controller Manager" as CM
participant "Scheduler" as S
participant "Kubelet" as KL
participant "nginx Pod 1" as NP1
participant "nginx Pod 2" as NP2
participant "nginx-hello-service" as SVC

== Build & Load Image ==
D -> D: docker build -t nginx_hello-nginx:latest .\n(with DOMAIN_1/2/3 support)
D -> K3S: docker save | k3s ctr images import -

== Deployment Creation ==
D -> K: DOMAIN_1="localhost" DOMAIN_2="site-r1.local" envsubst < k3s/configmap.yaml | kubectl apply -f -
D -> K: kubectl apply -f k3s/k3s-deployment.yaml
K -> API: Create ConfigMap, Deployment & Service
API -> CM: Watch Deployment (replicas: 2)
CM -> API: Create ReplicaSet
API -> S: Schedule 2 Pods
S -> API: Assign Pods to Node
API -> KL: Create Pod nginx-hello-1
API -> KL: Create Pod nginx-hello-2

== Pod Initialization ==
KL -> NP1: Start nginx container (non-root user:101)
KL -> NP2: Start nginx container (non-root user:101)
NP1 -> NP1: Read DOMAIN_1/2/3 from ConfigMap\nBuild NGINX_SERVER_NAME in entrypoint.sh\nenvsubst nginx.conf.template -> /tmp/nginx.conf\nServe src/html/index.html & /health endpoint
NP2 -> NP2: Read DOMAIN_1/2/3 from ConfigMap\nBuild NGINX_SERVER_NAME in entrypoint.sh\nenvsubst nginx.conf.template -> /tmp/nginx.conf\nServe src/html/index.html & /health endpoint

== Health Checks ==
KL -> NP1: Readiness Probe GET /health
NP1 -> KL: HTTP 200 OK
KL -> NP2: Readiness Probe GET /health  
NP2 -> KL: HTTP 200 OK
KL -> API: Pods Ready

== Service Creation ==
API -> KP: Create Service nginx-hello-service
KP -> KP: Setup iptables rules\nfor NodePort 30080\nLoad balance between pods

== User Requests ==
D -> K: kubectl port-forward svc/nginx-hello-service 8082:8080
K -> API: Create port-forward
API -> KL: Forward port 8082 -> Service:8080

== Main Page Request ==
D -> D: curl http://localhost:8082
note right: Port forward routes traffic
D -> KL: HTTP GET / (port 8082)
KL -> SVC: Forward to Service
SVC -> NP1: Load balance to Pod 1
NP1 -> NP1: Serve static HTML\n/usr/share/nginx/html/index.html\n(ðŸŽ‰ Hello World with CSS)
NP1 -> SVC: HTTP 200 + Beautiful HTML content
SVC -> KL: Return response
KL -> D: Modern HTML Hello World page

== Health Check Request ==
D -> D: curl http://localhost:8082/health
D -> KL: HTTP GET /health (port 8082)
KL -> SVC: Forward to Service
SVC -> NP2: Load balance to Pod 2
NP2 -> NP2: Process health check\nreturn 200 'OK'
NP2 -> SVC: HTTP 200 OK
SVC -> KL: Return response
KL -> D: OK

== Continuous Health Monitoring ==
loop Every 10 seconds (Liveness) / 5 seconds (Readiness)
    KL -> NP1: Liveness Probe GET /health
    NP1 -> KL: HTTP 200 OK
    KL -> NP2: Liveness Probe GET /health
    NP2 -> KL: HTTP 200 OK
    note over KL, NP2: Resource limits: 64Mi-128Mi RAM\n250m-500m CPU
end

== Configuration Update ==
D -> K: DOMAIN_1="example.com" DOMAIN_2="www.example.com" envsubst < k3s/configmap-prod.yaml | kubectl apply -f -
D -> K: kubectl rollout restart deployment nginx-hello
K -> API: Update ConfigMap with new domains
K -> API: Restart deployment
API -> KL: Rolling restart pods
note over D, KL: New pods pick up production domains

== Scaling Test ==
D -> K: kubectl scale deployment nginx-hello --replicas=1
K -> API: Update replicas
API -> KL: Terminate Pod nginx-hello-2
KL -> NP2: Graceful shutdown
D -> K: kubectl scale deployment nginx-hello --replicas=2
K -> API: Update replicas
API -> KL: Create new Pod nginx-hello-3
note over D, KL: Rolling update ensures zero downtime

== Ingress Access via Traefik ==
note over D, TI: Primary access method through Traefik
D -> TI: HTTP Request to site-r1.local
TI -> TI: Route based on Host header\ntraefik.ingress.kubernetes.io rules
TI -> SVC: Forward to nginx-hello-service
SVC -> NP1: Load balance to available Pod
NP1 -> SVC: HTTP Response (nginx serves static files)
SVC -> TI: Return response
TI -> D: Response content

== Alternative: Direct Service Access ==
note over D, SVC: Alternative access method
D -> K3S: kubectl port-forward svc/nginx-hello-service 8082:8080
K3S -> SVC: Direct service access
SVC -> NP2: Forward to nginx Pod
NP2 -> SVC: HTTP Response
SVC -> D: Response content

@enduml