@startuml
Title k3s Nginx Hello World Sequence

!theme plain

actor Developer as D
participant "kubectl" as K
participant "k3s Cluster" as K3S
participant "API Server" as API
participant "Controller Manager" as CM
participant "Scheduler" as S
participant "Kubelet" as KL
participant "nginx Pod 1" as NP1
participant "nginx Pod 2" as NP2

== Build & Load Image ==
D -> D: docker build -t nginx_hello-nginx:latest .
D -> K3S: k3d image import nginx_hello-nginx:latest -c hello-world-cluster

== Helm Deployment ==
D -> K: helm upgrade --install nginx-hello helm/nginx-hello/\n-f values.yaml -f values.dev.yaml
K -> API: Create ConfigMap, Deployment & Service
API -> CM: Watch Deployment (replicas: 2)
CM -> API: Create ReplicaSet
API -> S: Schedule 2 Pods
S -> API: Assign Pods to Node
API -> KL: Create Pod nginx-hello-1
API -> KL: Create Pod nginx-hello-2

== Pod Initialization ==
KL -> NP1: Start nginx container (non-root user:101)
KL -> NP2: Start nginx container (non-root user:101)
NP1 -> NP1: Read config.domains from ConfigMap\nGenerate nginx.conf via envsubst\nServe /health & static HTML
NP2 -> NP2: Same initialization process

== Health Checks ==
KL -> NP1: Readiness Probe GET /health
NP1 -> KL: HTTP 200 OK
KL -> NP2: Readiness Probe GET /health  
NP2 -> KL: HTTP 200 OK
KL -> API: Pods Ready

== Service & Load Balancing ==
API -> K3S: Create Service nginx-hello-service
note over K3S: kube-proxy sets up iptables\nLoad balances between pods

== Automated Testing (make k3d-test-isolated) ==
D -> K: kubectl exec POD_NAME -- curl -f http://localhost:8080/
K -> NP1: Execute curl inside pod
NP1 -> NP1: Serve static HTML
NP1 -> K: HTTP 200 + HTML content
K -> D: Main page OK

D -> K: kubectl exec POD_NAME -- curl -f http://localhost:8080/health
K -> NP2: Execute curl inside pod
NP2 -> NP2: Health check endpoint
NP2 -> K: HTTP 200 OK
K -> D: Health check OK

note over D, K: Tests pods directly without port-forward

== Continuous Health Monitoring ==
loop Every 10 seconds (Liveness) / 5 seconds (Readiness)
    KL -> NP1: Liveness Probe GET /health
    NP1 -> KL: HTTP 200 OK
    KL -> NP2: Liveness Probe GET /health
    NP2 -> KL: HTTP 200 OK
    note over KL, NP2: Resource limits: 64Mi-128Mi RAM\n250m-500m CPU
end

== Configuration Update (Production) ==
D -> K: helm upgrade nginx-hello helm/nginx-hello/\n-f values.yaml -f values.prod.yaml
K -> API: Update ConfigMap & Deployment
API -> KL: Rolling restart pods
note over D, KL: New pods pick up production config\n(3 replicas, 2048 worker connections)

== Scaling ==
D -> K: kubectl scale deployment nginx-hello --replicas=1
K -> API: Update replicas
API -> KL: Terminate Pod nginx-hello-2
KL -> NP2: Graceful shutdown
D -> K: kubectl scale deployment nginx-hello --replicas=2
K -> API: Update replicas
API -> KL: Create new Pod nginx-hello-3
note over KL: RollingUpdate strategy: maxUnavailable=1, maxSurge=1

== Ingress (Created via Helm) ==
note over D, K3S: Helm already created Ingress resource\nTraefik (k3s built-in) handles routing\nDev uses kubectl port-forward for simplicity

== Custom Ports (Avoid Conflicts) ==
note over D, K3S: Multiple projects can run simultaneously
D -> D: K3D_API_PORT=6444 K3D_LB_PORT=8081\nmake k3d-cluster-isolated
D -> K3S: k3d cluster create hello-world-cluster\n--api-port 127.0.0.1:6444\n--port 8081:80@loadbalancer
note over D, K3S: Configurable ports prevent conflicts\nwith other k3d clusters

@enduml